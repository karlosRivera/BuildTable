@model BuildTable.Models.MainViewModel
@{
    ViewBag.Title = "Home Page";
}

@*@foreach (var m in Model.Students)
    {
    <tr>
        <td><input type="text" value="@m.ID" /></td>
        <td><input type="text" value="@m.Name" /></td>
        <td>
            @Html.DropDownListFor(x => x.SelectedState new SelectList(Model.Students.States, "ID", "Name", Model.SelectedState), "-- Select States--", new { id = "cboState", @class = "edit-mode" })
        </td>
        <td>
            @Html.DropDownListFor(x => x.SelectedCity new SelectList(Model.Students.Cities, "ID", "Name", Model.SelectedCity), "-- Select States--", new { id = "cboState", @class = "edit-mode" })
        </td>
    </tr>
    }*@

<link href="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.1/jquery.qtip.min.css" rel="stylesheet" />

<style type="text/css">
.validation-error
{
    background: #FEF1EC;
    border: 1px solid #CD0A0A;
}

.tooltip-inner {
    max-width: 300px;
    padding: 0;
    border: solid 1px #ccc;
    background-color: #f00;
}
.tooltip-alert{
    padding: 8px 10px;
    font-weight: bolder;
    color: white;
    background-color: #f00;
} 

.tooltip-arrow { border-bottom-color:black; }


</style>
<h1>Tabular data design in loop with html table</h1>
@using (Html.BeginForm("Index", "Home", FormMethod.Post))
{
    <div>
        <table>
            <tr>
                <td>ID</td>
                <td>Name</td>
                <td>State</td>
                <td>City</td>
            </tr>
            @for (int i = 0; i < Model.Students.Count; i++)
            {
                <tr>
                    <td>
                        @Html.TextBoxFor(m => m.Students[i].ID)
                        @Html.ValidationMessageFor(m => m.Students[i].ID, "", new { @class = "text-danger" })
                    </td>

                    <td>
                        @Html.TextBoxFor(m => m.Students[i].Name)
                        @Html.ValidationMessageFor(m => m.Students[i].Name, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.Students[i].StateID, new SelectList(Model.Students[i].States, "ID", "Name", Model.Students[i].StateID), "-- Select States--", new { @class = "edit-mode" })
                        @Html.ValidationMessageFor(m => m.Students[i].StateID, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.Students[i].CityID, new SelectList(Model.Students[i].Cities, "ID", "Name", Model.Students[i].CityID), "--Select States--", new { @class = "edit-model" })
                        @Html.ValidationMessageFor(m => m.Students[i].CityID, "", new { @class = "text-danger" })
                    </td>
                </tr>
            }
        </table>
    </div>
    <p><input id="btnSubmit" type="submit" value="Submit" /></p>
}



@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.1/jquery.qtip.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#btnSubmit').click(function () {
                var $form = $('form');
                if ($form.valid()) {
                    alert("val Ok");
                }
                else {
                    alert("val fail");
                }
                return false;
            });
        });

        (function ($) {
            var classes = { groupIdentifier: ".form-group", error: 'has-error', success: null };//success: 'has-success' 
            function updateClasses(inputElement, toAdd, toRemove) {
                var group = inputElement.closest(classes.groupIdentifier);
                if (group.length > 0) {
                    group.addClass(toAdd).removeClass(toRemove);
                }
            }
            function onError(inputElement, message) {
                updateClasses(inputElement, classes.error, classes.success);

                var options = { html: true, placement: 'bottom', title: '<div class="tooltip-alert alert-danger" data-placement="bottom">' + message + '</div>' };
                $(inputElement).addClass('validation-error');
                inputElement.tooltip("destroy")
                    .addClass("error")
                    .tooltip(options);
            }
            function onSuccess(inputElement) {
                updateClasses(inputElement, classes.success, classes.error);
                inputElement.tooltip("destroy");
                $(inputElement).removeClass('validation-error');
            }

            function onValidated(errorMap, errorList) {
                $.each(errorList, function () {
                    onError($(this.element), this.message);
                });

                if (this.settings.success) {
                    $.each(this.successList, function () {
                        onSuccess($(this));
                    });
                }
            }

            $(function () {
                $('form').each(function () {
                    var validator = $(this).data('validator');
                    validator.settings.showErrors = onValidated;
                });
            });
        }(jQuery));
    </script>
}



